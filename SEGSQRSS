#include <bits/stdc++.h>
 
using namespace std;
const int n=100005;
struct node
{
    int s,sq;
};
node tree[4*n];
int  arr[n];
void cons(int s,int e ,int current)
{
    if(s==e)
    {
        tree[current].s=arr[s];
        tree[current].sq=arr[s]*arr[s];
    }
    else
    {
        int mid=(s+e)/2;
        cons(s,mid,2*current+1);
 
        cons(mid+1,e,2*current +2);
        tree[current].s=tree[2*current+1].s+tree[2*current+2].s;
        tree[current].sq=tree[2*current+1].sq+tree[2*current+2].sq;
 
    }
}
void u1(int s,int e,int qs,int qe,int dif,int i)
{
 
        int mid =(s+e)/2;
        if(s>e||s>qe||e<qs)
            return ;
         if(s>=qs&&e<=qe)
        {
              tree[i].sq=tree[i].sq+(e-s+1)*dif*dif+2*(tree[i].s)*dif;
            tree[i].s=tree[i].s+(e-s+1)*dif;
          //  cout<<tree[i].s<<" "<<tree[i].sq<<"\n";
     return;
        }
        u1(s,mid,qs,qe,dif,2*i+1);
        u1(mid+1,e,qs,qe,dif,2*i+2);
            tree[i].s=tree[2*i+1].s+tree[2*i+2].s;
            tree[i].sq=tree[2*i+1].sq+tree[2*i+2].sq;
    }
void u2(int s,int e,int qs,int qe,int dif,int i)
{
 
        int mid =(s+e)/2;
        if(s>e||s>qe||e<qs)
            return ;
         if(s>=qs&&e<=qe)
        {
              tree[i].sq=(e-s+1)*dif*dif;
            tree[i].s=(e-s+1)*dif;
     return;
        }
        u2(s,mid,qs,qe,dif,2*i+1);
        u2(mid+1,e,qs,qe,dif,2*i+2);
            tree[i].s=tree[2*i+1].s+tree[2*i+2].s;
            tree[i].sq=tree[2*i+1].sq+tree[2*i+2].sq;
    }
node query(int s,int e,int qs,int qe,int i)
{
    node result;
 result.s=0;
 result.sq=0;
 if(s>e||s>qe||e<qs)
    return result;
 if(s>=qs&&e<=qe)
 {
 
 //cout<<s<<" "<<e<<"\n";
    return tree[i];
 }
 int mid=(s+e)/2;
 node left=query(s,mid,qs,qe,2*i+1);
 node right=query(mid+1,e,qs,qe,2*i+2);
    result.s=left.s+right.s;
    result.sq=left.sq+right.sq;
    return result;
}
int main()
{
    int n,m,t,i,j,k,x,a,b,dif;
    scanf("%d",&t);
    for(k=1;k<=t;k++)
    {
    scanf("%d%d",&n,&m);
    for(int i=0;i<n;i++)
        scanf("%d",&arr[i]);
     //scanf("%d",&m);
    cons(0,n-1,0);
 
    printf("Case %d:\n",k);
  /*  cout<<tree[0].sq<<"\n";
    cout<<tree[1].sq<<"\n";
    cout<<tree[2].sq<<"\n";
    cout<<tree[3].sq<<"\n";
    cout<<tree[4].sq<<"\n";
    cout<<tree[5].sq<<"\n";
    cout<<tree[6].sq<<"\n";*/
   for(j=0;j<m;j++)
   {
       scanf("%d",&x);
       if(x==0)
       {
           scanf("%d%d%d",&a,&b,&dif);
           u2(0,n-1,a-1,b-1,dif,0);
       }
       if(x==1)
       {
           scanf("%d%d%d",&a,&b,&dif);
           u1(0,n-1,a-1,b-1,dif,0);
       }
       if(x==2)
       {
           scanf("%d%d",&a,&b);
           node re=query(0,n-1,a-1,b-1,0);
           printf("%d\n",re.sq);
       }
   }
    }
    return 0;
}
 
