#include <bits/stdc++.h>
const int MAX= 2e5+6;
int tree[MAX*4] ={0};
int lazy[MAX*4]={0} ;
void updateRangeUtil(int si, int ss, int se, int us,
                     int ue)
{
    if (lazy[si] != 0)
    {
 
        tree[si] = (se-ss+1)-tree[si];
        if (ss != se)
        {
            lazy[si*2 + 1]   = (lazy[si*2+1]+1)%2;
            lazy[si*2 + 2]   = (lazy[si*2+2]+1)%2;
        }
 
        lazy[si] = 0;
    }
    if (ss>se || ss>ue || se<us)
        return ;
 
    if (ss>=us && se<=ue)
    {
    tree[si] = (se-ss+1)-tree[si];
        if (ss != se)
        {
            lazy[si*2 + 1]   = (lazy[si*2+1]+1)%2;
            lazy[si*2 + 2]   = (lazy[si*2+2]+1)%2;
        }
        return;
    }
    int mid = (ss+se)/2;
    updateRangeUtil(si*2+1, ss, mid, us, ue);
    updateRangeUtil(si*2+2, mid+1, se, us, ue);
    tree[si] = tree[si*2+1] + tree[si*2+2];
}
int getSumUtil(int ss, int se, int qs, int qe, int si)
{
 
    if (lazy[si] != 0)
    {
 
        tree[si] = (se-ss+1)-tree[si];
        if (ss != se)
        {
            lazy[si*2 + 1]   = (lazy[si*2+1]+1)%2;
            lazy[si*2 + 2]   = (lazy[si*2+2]+1)%2;
        }
        lazy[si] = 0;
    }
    if (ss>se || ss>qe || se<qs)
        return 0;
 
    if (ss>=qs && se<=qe)
        return tree[si];
 
    int mid = (ss + se)/2;
    return getSumUtil(ss, mid, qs, qe, 2*si+1) +
           getSumUtil(mid+1, se, qs, qe, 2*si+2);
}
int main()
{
    int i,j,n,m,a,b,c;
    scanf("%d%d",&n,&m);
    for(i=0;i<m;i++)
    {
      scanf("%d%d%d",&a,&b,&c);
      if(a)
      {
          printf("%d\n",getSumUtil(0,n-1,b-1,c-1,0));
      }
      else
      {
          updateRangeUtil(0,0,n-1,b-1,c-1);
      }
    }
    return 0;
}
