#include <bits/stdc++.h>
using namespace std;
int main()
{
    int m,n,i,j,k,v,t,tt,p,V=0,K=0;
    scanf("%d%d",&m,&n);
    char ch[m][n],source;
    queue <int> q,qq;
vector < vector  <int > > visited( m, vector <int > (n, 0));
        for(j=0;j<m;j++)
     {

       scanf("%s",ch[j]);}
    v=0;
    k=0;
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            p=0;
            v=0;
            k=0;
            source=ch[i][j];
            if(visited[i][j]==0&&source!='#')
        {
          visited[i][j]=1;
           q.push(i);
           qq.push(j);
           if(source=='v')
                    v++;
                else  if(source=='k')
                    k++;
                if((i==0||i==m-1)||((j==0)||(j==n-1)))
                    p++;
           while(!q.empty())
           {
                t=q.front();
               tt=qq.front();
               q.pop();
               qq.pop();
               if(((t-1)>=0&&tt>=0)&&((t-1)<m&&tt<n))
           {
               if(ch[t-1][tt]!='#'&&visited[t-1][tt]==0)
               {
                   q.push(t-1);
                   qq.push(tt);
                   visited[t-1][tt]=1;
                if(ch[t-1][tt]=='v')
                    v++;
                else  if(ch[t-1][tt]=='k')
                    k++;
                if((t-1)==0||(t-1)==(m-1)||((tt==0)||(tt==n-1)))
                    p++;
               }
            }
                 if(((t+1)>=0&&tt>=0)&&((t+1)<m&&tt<n))
           {
               if(ch[t+1][tt]!='#'&&visited[t+1][tt]==0)
               {
                   q.push(t+1);
                   qq.push(tt);
                   visited[t+1][tt]=1;
                if(ch[t+1][tt]=='v')
                    v++;
                else if(ch[t+1][tt]=='k')
                    k++;
                if((t+1)==0||(t+1)==(m-1)||((tt==0)||(tt==n-1)))
                    p++;
               }
            }
                 if((t>=0&&(tt-1)>=0)&&(t<m&&(tt-1)<n))
           {
               if(ch[t][tt-1]!='#'&&visited[t][tt-1]==0)
               {
                   q.push(t);
                   qq.push(tt-1);
                   visited[t][tt-1]=1;
                if(ch[t][tt-1]=='v')
                    v++;
                else if(ch[t][tt-1]=='k')
                    k++;
                if(t==0||t==(m-1)||(((tt-1)==0)||((tt-1)==n-1)))
                    p++;
               }
            }
               if((t>=0&&(tt+1)>=0)&&(t<m&&(tt+1)<n))
           {
               if(ch[t][tt+1]!='#'&&visited[t][tt+1]==0)
               {
                   q.push(t);
                   qq.push(tt+1);
                   visited[t][tt+1]=1;
                if(ch[t][tt+1]=='v')
                    v++;
                else if(ch[t][tt+1]=='k')
                    k++;
                if(t==0||t==(m-1)||(((tt+1)==0)||((tt+1)==n-1)))
                    p++;
               }
            }
        }
    if(p>0)
        {V=V+v;
    K=K+k;}
    else
        { if(k>v)
    K=K+k;
    else
    V=V+v;}

    }
        }
    }
    cout<<K<<" "<<V;
    return 0;
}
