/* i have created a structure which stores  weight and coordinates for respective positions and have created a priority queue for structures 
we need to overload c++ operator for this priorit queue . We need to see find the minimum time needed to reach hermonie , given weights for 
each cells , dijikstra applies well .. there is just the problem for implementation which one could look at solution*/
#include <bits/stdc++.h>

using namespace std;
struct node
{
    int i,j ,w;
};
bool operator<(const node& a, const node& b) {
  return a.w > b.w;
}
int main()
{
    int t,n,m,i,j,tt,x,y,T;
    scanf("%d",&t);
    priority_queue <node > pq;
        for(tt=0;tt<t;tt++)
{
    scanf("%d%d",&n,&m);
    int v[n+1][m+1]={0},mp[n+1][m+1],d[n+1][m+1]={1000000};

    for(i=1;i<=n;i++)
    {
        for(j=1;j<=m;j++)
        {

    v[i][j]=0;d[i][j]=100000;
            scanf("%d",&mp[i][j]);
        }
    }
     d[1][1]=mp[1][1];
    scanf("%d%d%d",&x,&y,&T);
    node start;start.i=1;start.j=1;start.w=mp[1][1];
    int mx[]={0,0,1,-1};
    int my[]={1,-1,0,0};
    pq.push(start);
    while(!pq.empty())
    {
        node temp=pq.top();
        pq.pop();
        int xx,yy,ww;
        xx=temp.i;yy=temp.j; ww=temp.w;
if(xx==x&&yy==y)
    break;
        if(v[xx][yy])
            continue;
        for(int pp=0;pp<4;pp++)
        {
            int X=xx+mx[pp];
            int Y=yy+my[pp];
            if(X>0&&X<=n&&Y>0&&Y<=m)
            {
                if(v[X][Y]==0&&d[xx][yy]+mp[X][Y]<d[X][Y])
                {

                    d[X][Y]=ww+mp[X][Y];
                    node qq; qq.i=X ; qq.j=Y ; qq.w=d[X][Y];
                    pq.push(qq);
                }
            }
        }
        v[xx][yy]=1;
    }
if(T>=d[x][y])
{
    printf("YES\n");
    printf("%d\n",(T-d[x][y]));
}
else
    printf("NO\n");
while(!pq.empty())
    pq.pop();

}
    return 0;
}
